/*
 * Copyright 2022-2023 Clément Bœsch <u pkh.me>
 * Copyright 2022 GoPro Inc.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

shared uint group_max_rgb;
shared uint group_max_luma;

void main()
{
    /* 1st thread from each workgroup initialize the workgroup shared maximums */
    if (gl_LocalInvocationIndex == 0U) {
        group_max_rgb = 0U;
        group_max_luma = 0U;
    }

    barrier(); /* Wait for the workgroup shared data initialization */

    /* Just like in the init compute shader, we have a total of depth threads */
    uvec4 summary = stats.summary[gl_GlobalInvocationID.x];
    uint max_rgb = max(max(summary.r, summary.g), summary.b);
    uint max_luma = summary.a;

    atomicMax(group_max_rgb, max_rgb);
    atomicMax(group_max_luma, max_luma);

    barrier(); /* Wait for all updates on the shared data */

    /* 1st thread from each workgroup populate their maximum to the global one */
    if (gl_LocalInvocationIndex == 0U) {
        atomicMax(stats.max_rgb.y, group_max_rgb);
        atomicMax(stats.max_luma.y, group_max_luma);
    }
}
