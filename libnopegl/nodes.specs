{
  "types": [
    {
      "name": "i32",
      "size": 4,
      "desc": "32-bit integer"
    },
    {
      "name": "ivec2",
      "size": 8,
      "desc": "2 32-bit integers"
    },
    {
      "name": "ivec3",
      "size": 12,
      "desc": "3 32-bit integers"
    },
    {
      "name": "ivec4",
      "size": 16,
      "desc": "4 32-bit integers"
    },
    {
      "name": "bool",
      "size": 4,
      "desc": "Boolean (map to `int` in C)"
    },
    {
      "name": "u32",
      "size": 4,
      "desc": "32-bit unsigned integer"
    },
    {
      "name": "uvec2",
      "size": 8,
      "desc": "2 32-bit unsigned integers"
    },
    {
      "name": "uvec3",
      "size": 12,
      "desc": "3 32-bit unsigned integers"
    },
    {
      "name": "uvec4",
      "size": 16,
      "desc": "4 32-bit unsigned integers"
    },
    {
      "name": "f64",
      "size": 8,
      "desc": "64-bit float"
    },
    {
      "name": "str",
      "size": 8,
      "desc": "String"
    },
    {
      "name": "data",
      "size": 16,
      "desc": "Agnostic data buffer"
    },
    {
      "name": "f32",
      "size": 4,
      "desc": "32-bit float"
    },
    {
      "name": "vec2",
      "size": 8,
      "desc": "2 32-bit floats"
    },
    {
      "name": "vec3",
      "size": 12,
      "desc": "3 32-bit floats"
    },
    {
      "name": "vec4",
      "size": 16,
      "desc": "4 32-bit floats"
    },
    {
      "name": "mat4",
      "size": 64,
      "desc": "4x4 32-bit floats, column major memory layout (the first 4 floats corresponds to 1 mathematical matrix column)"
    },
    {
      "name": "node",
      "size": 8,
      "desc": "nope.gl Node"
    },
    {
      "name": "node_list",
      "size": 16,
      "desc": "List of nope.gl Node"
    },
    {
      "name": "f64_list",
      "size": 16,
      "desc": "List of 64-bit floats"
    },
    {
      "name": "node_dict",
      "size": 8,
      "desc": "Dictionary mapping arbitrary string identifiers to nope.gl Nodes"
    },
    {
      "name": "select",
      "size": 4,
      "desc": "Selection of one constant (expressed as a string)"
    },
    {
      "name": "flags",
      "size": 4,
      "desc": "Combination of constants (expressed as strings), using `+` as separator. Can be empty for none."
    },
    {
      "name": "rational",
      "size": 8,
      "desc": "Rational number (expressed as 2 32-bit integers, respectively as numerator and denominator)"
    }
  ],
  "choices": {
    "colorspace": [
      {
        "name": "srgb",
        "desc": "sRGB (standard RGB)"
      },
      {
        "name": "hsl",
        "desc": "Hue/Saturation/Lightness (polar form of sRGB)"
      },
      {
        "name": "hsv",
        "desc": "Hue/Saturation/Value (polar form of sRGB)"
      }
    ],
    "easing": [
      {
        "name": "linear",
        "desc": "`linear(x)=x`"
      },
      {
        "name": "quadratic_in",
        "desc": "`quadratic(x)=x²`"
      },
      {
        "name": "quadratic_out",
        "desc": "`quadratic_out(x)=1-quadratic(1-x)`"
      },
      {
        "name": "quadratic_in_out",
        "desc": "`quadratic_in_out(x)=quadratic(2x)/2` if `x<½` else `1-quadratic(2*(1-x))/2`"
      },
      {
        "name": "quadratic_out_in",
        "desc": "`quadratic_out_in(x)=(1-quadratic(1-2x))/2` if `x<½` else `(1+quadratic(2x-1))/2`"
      },
      {
        "name": "cubic_in",
        "desc": "`cubic(x)=x³`"
      },
      {
        "name": "cubic_out",
        "desc": "`cubic_out(x)=1-cubic(1-x)`"
      },
      {
        "name": "cubic_in_out",
        "desc": "`cubic_in_out(x)=cubic(2x)/2` if `x<½` else `1-cubic(2*(1-x))/2`"
      },
      {
        "name": "cubic_out_in",
        "desc": "`cubic_out_in(x)=(1-cubic(1-2x))/2` if `x<½` else `(1+cubic(2x-1))/2`"
      },
      {
        "name": "quartic_in",
        "desc": "`quartic(x)=x⁴`"
      },
      {
        "name": "quartic_out",
        "desc": "`quartic_out(x)=1-quartic(1-x)`"
      },
      {
        "name": "quartic_in_out",
        "desc": "`quartic_in_out(x)=quartic(2x)/2` if `x<½` else `1-quartic(2*(1-x))/2`"
      },
      {
        "name": "quartic_out_in",
        "desc": "`quartic_out_in(x)=(1-quartic(1-2x))/2` if `x<½` else `(1+quartic(2x-1))/2`"
      },
      {
        "name": "quintic_in",
        "desc": "`quintic(x)=x⁵`"
      },
      {
        "name": "quintic_out",
        "desc": "`quintic_out(x)=1-quintic(1-x)`"
      },
      {
        "name": "quintic_in_out",
        "desc": "`quintic_in_out(x)=quintic(2x)/2` if `x<½` else `1-quintic(2*(1-x))/2`"
      },
      {
        "name": "quintic_out_in",
        "desc": "`quintic_out_in(x)=(1-quintic(1-2x))/2` if `x<½` else `(1+quintic(2x-1))/2`"
      },
      {
        "name": "power_in",
        "desc": "`power(x,a=1)=x^a`"
      },
      {
        "name": "power_out",
        "desc": "`power_out(x,a=1)=1-power(1-x,a)`"
      },
      {
        "name": "power_in_out",
        "desc": "`power_in_out(x,a=1)=power(2x,a)/2` if `x<½` else `1-power(2*(1-x),a)/2`"
      },
      {
        "name": "power_out_in",
        "desc": "`power_out_in(x,a=1)=(1-power(1-2x,a))/2` if `x<½` else `(1+power(2x-1,a))/2`"
      },
      {
        "name": "sinus_in",
        "desc": "`sinus(x)=1-cos(x*π/2)`"
      },
      {
        "name": "sinus_out",
        "desc": "`sinus_out(x)=1-sinus(1-x)`"
      },
      {
        "name": "sinus_in_out",
        "desc": "`sinus_in_out(x)=sinus(2x)/2` if `x<½` else `1-sinus(2*(1-x))/2`"
      },
      {
        "name": "sinus_out_in",
        "desc": "`sinus_out_in(x)=(1-sinus(1-2x))/2` if `x<½` else `(1+sinus(2x-1))/2`"
      },
      {
        "name": "exp_in",
        "desc": "`exp(x,a=1024)=(pow(a,x)-1)/(a-1)`"
      },
      {
        "name": "exp_out",
        "desc": "`exp_out(x,a=1024)=1-exp(1-x,a)`"
      },
      {
        "name": "exp_in_out",
        "desc": "`exp_in_out(x,a=1024)=exp(2x,a)/2` if `x<½` else `1-exp(2*(1-x),a)/2`"
      },
      {
        "name": "exp_out_in",
        "desc": "`exp_out_in(x,a=1024)=(1-exp(1-2x,a))/2` if `x<½` else `(1+exp(2x-1,a))/2`"
      },
      {
        "name": "circular_in",
        "desc": "`circular(x)=1-√(1-x²)`"
      },
      {
        "name": "circular_out",
        "desc": "`circular_out(x)=1-circular(1-x)`"
      },
      {
        "name": "circular_in_out",
        "desc": "`circular_in_out(x)=circular(2x)/2` if `x<½` else `1-circular(2*(1-x))/2`"
      },
      {
        "name": "circular_out_in",
        "desc": "`circular_out_in(x)=(1-circular(1-2x))/2` if `x<½` else `(1+circular(2x-1))/2`"
      },
      {
        "name": "bounce_in",
        "desc": "bouncing from right to left 4 times"
      },
      {
        "name": "bounce_out",
        "desc": "diagonally mirrored version of `bounce_in()`"
      },
      {
        "name": "elastic_in",
        "desc": "elastic effect from weak to strong"
      },
      {
        "name": "elastic_out",
        "desc": "mirrored `elastic_in` effect"
      },
      {
        "name": "back_in",
        "desc": "mirrored `back_out` effect"
      },
      {
        "name": "back_out",
        "desc": "overstep target value and smoothly converge back to it"
      },
      {
        "name": "back_in_out",
        "desc": "combination of `back_in` then `back_out`"
      },
      {
        "name": "back_out_in",
        "desc": "combination of `back_out` then `back_in`"
      }
    ],
    "memory_layout": [
      {
        "name": "std140",
        "desc": "standard uniform block memory layout 140"
      },
      {
        "name": "std430",
        "desc": "standard uniform block memory layout 430"
      }
    ],
    "blend_preset": [
      {
        "name": "default",
        "desc": "unchanged current graphics state"
      },
      {
        "name": "src_over",
        "desc": "this node over destination"
      },
      {
        "name": "dst_over",
        "desc": "destination over this node"
      },
      {
        "name": "src_out",
        "desc": "subtract destination from this node"
      },
      {
        "name": "dst_out",
        "desc": "subtract this node from destination"
      },
      {
        "name": "src_in",
        "desc": "keep only the part of this node overlapping with destination"
      },
      {
        "name": "dst_in",
        "desc": "keep only the part of destination overlapping with this node"
      },
      {
        "name": "src_atop",
        "desc": "union of `src_in` and `dst_out`"
      },
      {
        "name": "dst_atop",
        "desc": "union of `src_out` and `dst_in`"
      },
      {
        "name": "xor",
        "desc": "exclusive or between this node and the destination"
      }
    ],
    "gradient_mode": [
      {
        "name": "ramp",
        "desc": "straight line gradient, uniform perpendicularly to the line between the points"
      },
      {
        "name": "radial",
        "desc": "distance between the points spread circularly"
      }
    ],
    "scope_mode": [
      {
        "name": "mixed",
        "desc": "R, G and B channels overlap on each others"
      },
      {
        "name": "parade",
        "desc": "split R, G and B channels"
      },
      {
        "name": "luma_only",
        "desc": "only the luma channel"
      }
    ],
    "noise_type": [
      {
        "name": "blocky",
        "desc": "blocky noise"
      },
      {
        "name": "perlin",
        "desc": "perlin noise"
      }
    ],
    "selector_component": [
      {
        "name": "lightness",
        "desc": "lightness component from OkLCH (within [0,1])"
      },
      {
        "name": "chroma",
        "desc": "chroma component from OkLCH (infinite upper boundary, but in practice within [0,0.4])"
      },
      {
        "name": "hue",
        "desc": "hue component from OkLCH (circular value in radian)"
      }
    ],
    "selector_drop": [
      {
        "name": "outside",
        "desc": "drop if value is outside the range"
      },
      {
        "name": "inside",
        "desc": "drop if value is inside the range"
      }
    ],
    "selector_output": [
      {
        "name": "colorholes",
        "desc": "replace the selected colors with `(0,0,0,0)`"
      },
      {
        "name": "binary",
        "desc": "same as `colorholes` but non-selected colors become `(1,1,1,1)`"
      }
    ],
    "topology": [
      {
        "name": "point_list",
        "desc": "point list"
      },
      {
        "name": "line_strip",
        "desc": "line strip"
      },
      {
        "name": "line_list",
        "desc": "line list"
      },
      {
        "name": "triangle_strip",
        "desc": "triangle strip"
      },
      {
        "name": "triangle_list",
        "desc": "triangle list"
      }
    ],
    "blend_factor": [
      {
        "name": "unset",
        "desc": "unset"
      },
      {
        "name": "zero",
        "desc": "`0`"
      },
      {
        "name": "one",
        "desc": "`1`"
      },
      {
        "name": "src_color",
        "desc": "`src_color`"
      },
      {
        "name": "one_minus_src_color",
        "desc": "`1 - src_color`"
      },
      {
        "name": "dst_color",
        "desc": "`dst_color`"
      },
      {
        "name": "one_minus_dst_color",
        "desc": "`1 - dst_color`"
      },
      {
        "name": "src_alpha",
        "desc": "`src_alpha`"
      },
      {
        "name": "one_minus_src_alpha",
        "desc": "`1 - src_alpha`"
      },
      {
        "name": "dst_alpha",
        "desc": "`dst_alpha`"
      },
      {
        "name": "one_minus_dst_alpha",
        "desc": "`1 - dst_alpha`"
      }
    ],
    "blend_operation": [
      {
        "name": "unset",
        "desc": "unset"
      },
      {
        "name": "add",
        "desc": "`src + dst`"
      },
      {
        "name": "sub",
        "desc": "`src - dst`"
      },
      {
        "name": "revsub",
        "desc": "`dst - src`"
      },
      {
        "name": "min",
        "desc": "`min(src, dst)`"
      },
      {
        "name": "max",
        "desc": "`max(src, dst)`"
      }
    ],
    "component": [
      {
        "name": "r",
        "desc": "red"
      },
      {
        "name": "g",
        "desc": "green"
      },
      {
        "name": "b",
        "desc": "blue"
      },
      {
        "name": "a",
        "desc": "alpha"
      }
    ],
    "function": [
      {
        "name": "unset",
        "desc": "unset"
      },
      {
        "name": "never",
        "desc": "`f(a,b) = 0`"
      },
      {
        "name": "less",
        "desc": "`f(a,b) = a < b`"
      },
      {
        "name": "equal",
        "desc": "`f(a,b) = a == b`"
      },
      {
        "name": "lequal",
        "desc": "`f(a,b) = a ≤ b`"
      },
      {
        "name": "greater",
        "desc": "`f(a,b) = a > b`"
      },
      {
        "name": "notequal",
        "desc": "`f(a,b) = a ≠ b`"
      },
      {
        "name": "gequal",
        "desc": "`f(a,b) = a ≥ b`"
      },
      {
        "name": "always",
        "desc": "`f(a,b) = 1`"
      }
    ],
    "stencil_operation": [
      {
        "name": "unset",
        "desc": "unset"
      },
      {
        "name": "keep",
        "desc": "keeps the current value"
      },
      {
        "name": "zero",
        "desc": "sets the stencil buffer value to 0"
      },
      {
        "name": "replace",
        "desc": "sets the stencil buffer value to ref, as specified by the stencil function"
      },
      {
        "name": "incr",
        "desc": "increments the current stencil buffer value and clamps it"
      },
      {
        "name": "incr_wrap",
        "desc": "increments the current stencil buffer value and wraps it"
      },
      {
        "name": "decr",
        "desc": "decrements the current stencil buffer value and clamps it"
      },
      {
        "name": "decr_wrap",
        "desc": "decrements the current stencil buffer value and wraps it"
      },
      {
        "name": "decr_invert",
        "desc": "bitwise inverts the current stencil buffer value"
      }
    ],
    "cull_mode": [
      {
        "name": "unset",
        "desc": "unset"
      },
      {
        "name": "none",
        "desc": "no facets are discarded"
      },
      {
        "name": "front",
        "desc": "cull front-facing facets"
      },
      {
        "name": "back",
        "desc": "cull back-facing facets"
      }
    ],
    "precision": [
      {
        "name": "auto",
        "desc": "automatic"
      },
      {
        "name": "high",
        "desc": "high"
      },
      {
        "name": "medium",
        "desc": "medium"
      },
      {
        "name": "low",
        "desc": "low"
      }
    ],
    "nopemd_log_level": [
      {
        "name": "verbose",
        "desc": "verbose messages"
      },
      {
        "name": "debug",
        "desc": "debugging messages"
      },
      {
        "name": "info",
        "desc": "informational messages"
      },
      {
        "name": "warning",
        "desc": "warning messages"
      },
      {
        "name": "error",
        "desc": "error messages"
      }
    ],
    "nopemd_hwaccel": [
      {
        "name": "disabled",
        "desc": "disable hardware acceleration"
      },
      {
        "name": "auto",
        "desc": "enable hardware acceleration if available"
      }
    ],
    "interp_noise": [
      {
        "name": "linear",
        "desc": "linear interpolation (not recommended), f(t)=t"
      },
      {
        "name": "cubic",
        "desc": "cubic hermite curve, f(t)=3t²-2t³"
      },
      {
        "name": "quintic",
        "desc": "quintic curve, f(t)=6t⁵-15t⁴+10t³"
      }
    ],
    "scale_mode": [
      {
        "name": "auto",
        "desc": "automatic size by fitting the specified bounding box"
      },
      {
        "name": "fixed",
        "desc": "fixed character size (bounding box ignored for scaling)"
      }
    ],
    "valign": [
      {
        "name": "center",
        "desc": "vertically centered"
      },
      {
        "name": "bottom",
        "desc": "bottom positioned"
      },
      {
        "name": "top",
        "desc": "top positioned"
      }
    ],
    "halign": [
      {
        "name": "center",
        "desc": "horizontally centered"
      },
      {
        "name": "right",
        "desc": "right positioned"
      },
      {
        "name": "left",
        "desc": "left positioned"
      }
    ],
    "writing_mode": [
      {
        "name": "horizontal-tb",
        "desc": "left-to-right flow then top-to-bottom per line"
      },
      {
        "name": "vertical-rl",
        "desc": "top-to-bottom flow then right-to-left per line"
      },
      {
        "name": "vertical-lr",
        "desc": "top-to-bottom flow then left-to-right per line"
      }
    ],
    "text_target": [
      {
        "name": "char",
        "desc": "characters"
      },
      {
        "name": "char_nospace",
        "desc": "characters (skipping whitespaces)"
      },
      {
        "name": "word",
        "desc": "words"
      },
      {
        "name": "line",
        "desc": "lines"
      },
      {
        "name": "text",
        "desc": "whole text"
      }
    ],
    "anchor_ref": [
      {
        "name": "char",
        "desc": "relative to the center of each character"
      },
      {
        "name": "box",
        "desc": "relative to the bounding box of the text"
      },
      {
        "name": "viewport",
        "desc": "relative to the [-1,1] viewport"
      }
    ],
    "format": [
      {
        "name": "undefined",
        "desc": "undefined"
      },
      {
        "name": "r8_unorm",
        "desc": "8-bit unsigned normalized R component"
      },
      {
        "name": "r8_snorm",
        "desc": "8-bit signed normalized R component"
      },
      {
        "name": "r8_uint",
        "desc": "8-bit unsigned integer R component"
      },
      {
        "name": "r8_sint",
        "desc": "8-bit signed integer R component"
      },
      {
        "name": "r8g8_unorm",
        "desc": "8-bit unsigned normalized RG components"
      },
      {
        "name": "r8g8_snorm",
        "desc": "8-bit signed normalized RG components"
      },
      {
        "name": "r8g8_uint",
        "desc": "8-bit unsigned integer RG components"
      },
      {
        "name": "r8g8_sint",
        "desc": "8-bit signed normalized RG components"
      },
      {
        "name": "r8g8b8a8_unorm",
        "desc": "8-bit unsigned normalized RGBA components"
      },
      {
        "name": "r8g8b8a8_snorm",
        "desc": "8-bit signed normalized RGBA components"
      },
      {
        "name": "r8g8b8a8_uint",
        "desc": "8-bit unsigned integer RGBA components"
      },
      {
        "name": "r8g8b8a8_sint",
        "desc": "8-bit signed integer RGBA components"
      },
      {
        "name": "r8g8b8a8_srgb",
        "desc": "8-bit unsigned normalized RGBA components"
      },
      {
        "name": "b8g8r8a8_unorm",
        "desc": "8-bit unsigned normalized BGRA components"
      },
      {
        "name": "b8g8r8a8_snorm",
        "desc": "8-bit signed normalized BGRA components"
      },
      {
        "name": "b8g8r8a8_uint",
        "desc": "8-bit unsigned integer BGRA components"
      },
      {
        "name": "b8g8r8a8_sint",
        "desc": "8-bit signed integer BGRA components"
      },
      {
        "name": "r16_unorm",
        "desc": "16-bit unsigned normalized R component"
      },
      {
        "name": "r16_snorm",
        "desc": "16-bit signed normalized R component"
      },
      {
        "name": "r16_uint",
        "desc": "16-bit unsigned integer R component"
      },
      {
        "name": "r16_sint",
        "desc": "16-bit signed integer R component"
      },
      {
        "name": "r16_sfloat",
        "desc": "16-bit signed float R component"
      },
      {
        "name": "r16g16_unorm",
        "desc": "16-bit unsigned normalized RG components"
      },
      {
        "name": "r16g16_snorm",
        "desc": "16-bit signed normalized RG components"
      },
      {
        "name": "r16g16_uint",
        "desc": "16-bit unsigned integer RG components"
      },
      {
        "name": "r16g16_sint",
        "desc": "16-bit signed integer RG components"
      },
      {
        "name": "r16g16_sfloat",
        "desc": "16-bit signed float RG components"
      },
      {
        "name": "r16g16b16a16_unorm",
        "desc": "16-bit unsigned normalized RGBA components"
      },
      {
        "name": "r16g16b16a16_snorm",
        "desc": "16-bit signed normalized RGBA components"
      },
      {
        "name": "r16g16b16a16_uint",
        "desc": "16-bit unsigned integer RGBA components"
      },
      {
        "name": "r16g16b16a16_sint",
        "desc": "16-bit signed integer RGBA components"
      },
      {
        "name": "r16g16b16a16_sfloat",
        "desc": "16-bit signed float RGBA components"
      },
      {
        "name": "r32_uint",
        "desc": "32-bit unsigned integer R component"
      },
      {
        "name": "r32_sint",
        "desc": "32-bit signed integer R component"
      },
      {
        "name": "r32_sfloat",
        "desc": "32-bit signed float R component"
      },
      {
        "name": "r32g32_uint",
        "desc": "32-bit unsigned integer RG components"
      },
      {
        "name": "r32g32_sint",
        "desc": "32-bit signed integer RG components"
      },
      {
        "name": "r32g32_sfloat",
        "desc": "32-bit signed float RG components"
      },
      {
        "name": "r32g32b32a32_uint",
        "desc": "32-bit unsigned integer RGBA components"
      },
      {
        "name": "r32g32b32a32_sint",
        "desc": "32-bit signed integer RGBA components"
      },
      {
        "name": "r32g32b32a32_sfloat",
        "desc": "32-bit signed float RGBA components"
      },
      {
        "name": "d16_unorm",
        "desc": "16-bit unsigned normalized depth component"
      },
      {
        "name": "d24_unorm",
        "desc": "32-bit packed format that has 24-bit unsigned normalized depth component + 8-bit of unused data"
      },
      {
        "name": "d32_sfloat",
        "desc": "32-bit signed float depth component"
      },
      {
        "name": "d24_unorm_s8_uint",
        "desc": "32-bit packed format that has 24-bit unsigned normalized depth component + 8-bit unsigned integer stencil component"
      },
      {
        "name": "d32_sfloat_s8_uint",
        "desc": "64-bit packed format that has 32-bit signed float depth component + 8-bit unsigned integer stencil component + 24-bit of unused data"
      },
      {
        "name": "s8_uint",
        "desc": "8-bit unsigned integer stencil component"
      },
      {
        "name": "auto_depth",
        "desc": "select automatically the preferred depth format"
      },
      {
        "name": "auto_depth_stencil",
        "desc": "select automatically the preferred depth + stencil format"
      }
    ],
    "filter": [
      {
        "name": "nearest",
        "desc": "nearest filtering"
      },
      {
        "name": "linear",
        "desc": "linear filtering"
      }
    ],
    "mipmap_filter": [
      {
        "name": "none",
        "desc": "no mipmap generation"
      },
      {
        "name": "nearest",
        "desc": "nearest filtering"
      },
      {
        "name": "linear",
        "desc": "linear filtering"
      }
    ],
    "wrap": [
      {
        "name": "clamp_to_edge",
        "desc": "clamp to edge wrapping"
      },
      {
        "name": "mirrored_repeat",
        "desc": "mirrored repeat wrapping"
      },
      {
        "name": "repeat",
        "desc": "repeat pattern wrapping"
      }
    ]
  },
  "nodes": {
    "_Node": {
      "params": [
        {
          "name": "label",
          "type": "str",
          "flags": [],
          "desc": ""
        }
      ]
    },
    "_AnimatedBuffer": {
      "file": "src/node_animatedbuffer.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameBuffer"],
          "flags": [],
          "desc": "key frame buffers to interpolate from"
        }
      ]
    },
    "AnimatedBufferFloat": "_AnimatedBuffer",
    "AnimatedBufferVec2": "_AnimatedBuffer",
    "AnimatedBufferVec3": "_AnimatedBuffer",
    "AnimatedBufferVec4": "_AnimatedBuffer",
    "AnimatedColor": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameColor"],
          "flags": [],
          "desc": "color key frames to interpolate from"
        },
        {
          "name": "space",
          "type": "select",
          "default": "srgb",
          "choices": "colorspace",
          "flags": [],
          "desc": "color space defining how to interpret `value`"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedPath": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameFloat"],
          "flags": [],
          "desc": "float key frames to interpolate from, representing the normed distance from the start of the `path`"
        },
        {
          "name": "path",
          "type": "node",
          "node_types": ["Path", "SmoothPath"],
          "flags": ["nonull"],
          "desc": "path to follow"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedTime": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameFloat"],
          "flags": [],
          "desc": "time key frames to interpolate from"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedFloat": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameFloat"],
          "flags": [],
          "desc": "float key frames to interpolate from"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedVec2": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameVec2"],
          "flags": [],
          "desc": "vec2 key frames to interpolate from"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedVec3": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameVec3"],
          "flags": [],
          "desc": "vec3 key frames to interpolate from"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedVec4": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameVec4"],
          "flags": [],
          "desc": "vec4 key frames to interpolate from"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimatedQuat": {
      "file": "src/node_animated.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["AnimKeyFrameQuat"],
          "flags": [],
          "desc": "quaternion key frames to interpolate from"
        },
        {
          "name": "as_mat4",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "exposed as a 4x4 rotation matrix in the program"
        },
        {
          "name": "time_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "apply a time offset before evaluating the animation"
        }
      ]
    },
    "AnimKeyFrameFloat": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "value",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the value at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameVec2": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "value",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": [],
          "desc": "the value at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameVec3": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "value",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "the value at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameVec4": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "value",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "the value at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameQuat": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "quat",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "the quat at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameColor": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "color",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "the color at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "AnimKeyFrameBuffer": {
      "file": "src/node_animkeyframe.c",
      "params": [
        {
          "name": "time",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "the time key point in seconds"
        },
        {
          "name": "data",
          "type": "data",
          "flags": [],
          "desc": "the data at time `time`"
        },
        {
          "name": "easing",
          "type": "select",
          "default": "linear",
          "choices": "easing",
          "flags": [],
          "desc": "easing interpolation from previous key frame"
        },
        {
          "name": "easing_args",
          "type": "f64_list",
          "flags": [],
          "desc": "a list of arguments some easings may use"
        },
        {
          "name": "easing_start_offset",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "starting offset of the truncation of the easing"
        },
        {
          "name": "easing_end_offset",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "ending offset of the truncation of the easing"
        }
      ]
    },
    "Block": {
      "file": "src/node_block.c",
      "params": [
        {
          "name": "fields",
          "type": "node_list",
          "node_types": ["AnimatedBufferFloat", "AnimatedBufferVec2", "AnimatedBufferVec3", "AnimatedBufferVec4", "StreamedBufferInt", "StreamedBufferIVec2", "StreamedBufferIVec3", "StreamedBufferIVec4", "StreamedBufferUInt", "StreamedBufferUIVec2", "StreamedBufferUIVec3", "StreamedBufferUIVec4", "StreamedBufferFloat", "StreamedBufferVec2", "StreamedBufferVec3", "StreamedBufferVec4", "BufferFloat", "BufferVec2", "BufferVec3", "BufferVec4", "BufferInt", "BufferIVec2", "BufferIVec3", "BufferIVec4", "BufferUInt", "BufferUIVec2", "BufferUIVec3", "BufferUIVec4", "BufferMat4", "UniformBool", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformInt", "UniformIVec2", "UniformIVec3", "UniformIVec4", "UniformUInt", "UniformUIVec2", "UniformUIVec3", "UniformUIVec4", "UniformMat4", "UniformQuat", "UniformColor", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "AnimatedQuat", "AnimatedColor", "StreamedInt", "StreamedIVec2", "StreamedIVec3", "StreamedIVec4", "StreamedUInt", "StreamedUIVec2", "StreamedUIVec3", "StreamedUIVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "StreamedMat4", "Time"],
          "flags": [],
          "desc": "block fields defined in the graphic program"
        },
        {
          "name": "layout",
          "type": "select",
          "default": "std140",
          "choices": "memory_layout",
          "flags": [],
          "desc": "memory layout set in the graphic program"
        }
      ]
    },
    "_Buffer": {
      "file": "src/node_buffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements"
        },
        {
          "name": "data",
          "type": "data",
          "flags": [],
          "desc": "buffer of `count` elements"
        },
        {
          "name": "filename",
          "type": "str",
          "flags": ["filepath"],
          "desc": "filename from which the buffer will be read, cannot be used with `data`"
        },
        {
          "name": "block",
          "type": "node",
          "node_types": ["Block"],
          "flags": [],
          "desc": "reference a field from the given block"
        },
        {
          "name": "block_field",
          "type": "str",
          "flags": [],
          "desc": "field name in `block`"
        }
      ]
    },
    "BufferByte": "_Buffer",
    "BufferBVec2": "_Buffer",
    "BufferBVec3": "_Buffer",
    "BufferBVec4": "_Buffer",
    "BufferInt": "_Buffer",
    "BufferInt64": "_Buffer",
    "BufferIVec2": "_Buffer",
    "BufferIVec3": "_Buffer",
    "BufferIVec4": "_Buffer",
    "BufferShort": "_Buffer",
    "BufferSVec2": "_Buffer",
    "BufferSVec3": "_Buffer",
    "BufferSVec4": "_Buffer",
    "BufferUByte": "_Buffer",
    "BufferUBVec2": "_Buffer",
    "BufferUBVec3": "_Buffer",
    "BufferUBVec4": "_Buffer",
    "BufferUInt": "_Buffer",
    "BufferUIVec2": "_Buffer",
    "BufferUIVec3": "_Buffer",
    "BufferUIVec4": "_Buffer",
    "BufferUShort": "_Buffer",
    "BufferUSVec2": "_Buffer",
    "BufferUSVec3": "_Buffer",
    "BufferUSVec4": "_Buffer",
    "BufferFloat": "_Buffer",
    "BufferVec2": "_Buffer",
    "BufferVec3": "_Buffer",
    "BufferVec4": "_Buffer",
    "BufferMat4": "_Buffer",
    "Camera": {
      "file": "src/node_camera.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to observe through the lens of the camera"
        },
        {
          "name": "eye",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "eye position"
        },
        {
          "name": "center",
          "type": "vec3",
          "default": [0.000000,0.000000,-1.000000],
          "flags": ["live", "node"],
          "desc": "center position"
        },
        {
          "name": "up",
          "type": "vec3",
          "default": [0.000000,1.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "up vector, must not be parallel to the line of sight from the eye point to the center point"
        },
        {
          "name": "perspective",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "the 2 following values: *fov*, *aspect*"
        },
        {
          "name": "orthographic",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": ["live"],
          "desc": "the 4 following values: *left*, *right*, *bottom*, *top*"
        },
        {
          "name": "clipping",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": ["live"],
          "desc": "the 2 following values: *near clipping plane*, *far clipping plane*"
        },
        {
          "name": "eye_transform",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Identity"],
          "flags": [],
          "desc": "`eye` transformation chain"
        },
        {
          "name": "center_transform",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Identity"],
          "flags": [],
          "desc": "`center` transformation chain"
        },
        {
          "name": "up_transform",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Identity"],
          "flags": [],
          "desc": "`up` transformation chain"
        }
      ]
    },
    "Circle": {
      "file": "src/node_circle.c",
      "params": [
        {
          "name": "radius",
          "type": "f32",
          "default": 1.000000,
          "flags": [],
          "desc": "circle radius"
        },
        {
          "name": "npoints",
          "type": "u32",
          "default": 16,
          "flags": [],
          "desc": "number of points"
        }
      ]
    },
    "ColorKey": {
      "file": "src/node_colorkey.c",
      "params": [
        {
          "name": "position",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "position of the gradient point on the axis (within [0,1])"
        },
        {
          "name": "color",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "color at this specific position"
        },
        {
          "name": "opacity",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity at this specific position"
        }
      ]
    },
    "ColorStats": {
      "file": "src/node_colorstats.c",
      "params": [
        {
          "name": "texture",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "source texture to compute the color stats from"
        }
      ]
    },
    "Compute": {
      "file": "src/node_compute.c",
      "params": [
        {
          "name": "workgroup_count",
          "type": "uvec3",
          "default": [0,0,0],
          "flags": [],
          "desc": "number of work groups to be executed"
        },
        {
          "name": "program",
          "type": "node",
          "node_types": ["ComputeProgram"],
          "flags": ["nonull"],
          "desc": "compute program to be executed"
        },
        {
          "name": "resources",
          "type": "node_dict",
          "node_types": ["Texture2D", "Texture2DArray", "Texture3D", "TextureCube", "Block", "ColorStats", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "UniformQuat", "UniformBool", "UniformInt", "UniformIVec2", "UniformIVec3", "UniformIVec4", "UniformUInt", "UniformUIVec2", "UniformUIVec3", "UniformUIVec4", "UniformMat4", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "AnimatedQuat", "AnimatedColor", "NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "StreamedInt", "StreamedIVec2", "StreamedIVec3", "StreamedIVec4", "StreamedUInt", "StreamedUIVec2", "StreamedUIVec3", "StreamedUIVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "StreamedMat4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the compute `program`"
        }
      ]
    },
    "ComputeProgram": {
      "file": "src/node_computeprogram.c",
      "params": [
        {
          "name": "compute",
          "type": "str",
          "flags": ["nonull"],
          "desc": "compute shader"
        },
        {
          "name": "workgroup_size",
          "type": "ivec3",
          "default": [0,0,0],
          "flags": [],
          "desc": "number of local compute instances in a work group"
        },
        {
          "name": "properties",
          "type": "node_dict",
          "node_types": ["ResourceProps"],
          "flags": [],
          "desc": "resource properties"
        }
      ]
    },
    "Draw": {
      "file": "src/node_draw.c",
      "params": [
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": ["nonull"],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "program",
          "type": "node",
          "node_types": ["Program"],
          "flags": ["nonull"],
          "desc": "program to be executed"
        },
        {
          "name": "vert_resources",
          "type": "node_dict",
          "node_types": ["Texture2D", "Texture2DArray", "Texture3D", "TextureCube", "Block", "ColorStats", "BufferFloat", "BufferVec2", "BufferVec3", "BufferVec4", "NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "StreamedBufferInt", "StreamedBufferIVec2", "StreamedBufferIVec3", "StreamedBufferIVec4", "StreamedBufferUInt", "StreamedBufferUIVec2", "StreamedBufferUIVec3", "StreamedBufferUIVec4", "StreamedBufferFloat", "StreamedBufferVec2", "StreamedBufferVec3", "StreamedBufferVec4", "UniformBool", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "UniformQuat", "UniformInt", "UniformIVec2", "UniformIVec3", "UniformIVec4", "UniformUInt", "UniformUIVec2", "UniformUIVec3", "UniformUIVec4", "UniformMat4", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "AnimatedQuat", "AnimatedColor", "StreamedInt", "StreamedIVec2", "StreamedIVec3", "StreamedIVec4", "StreamedUInt", "StreamedUIVec2", "StreamedUIVec3", "StreamedUIVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "StreamedMat4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the vertex stage of the `program`"
        },
        {
          "name": "frag_resources",
          "type": "node_dict",
          "node_types": ["Texture2D", "Texture2DArray", "Texture3D", "TextureCube", "Block", "ColorStats", "BufferFloat", "BufferVec2", "BufferVec3", "BufferVec4", "NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "StreamedBufferInt", "StreamedBufferIVec2", "StreamedBufferIVec3", "StreamedBufferIVec4", "StreamedBufferUInt", "StreamedBufferUIVec2", "StreamedBufferUIVec3", "StreamedBufferUIVec4", "StreamedBufferFloat", "StreamedBufferVec2", "StreamedBufferVec3", "StreamedBufferVec4", "UniformBool", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "UniformQuat", "UniformInt", "UniformIVec2", "UniformIVec3", "UniformIVec4", "UniformUInt", "UniformUIVec2", "UniformUIVec3", "UniformUIVec4", "UniformMat4", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "AnimatedQuat", "AnimatedColor", "StreamedInt", "StreamedIVec2", "StreamedIVec3", "StreamedIVec4", "StreamedUInt", "StreamedUIVec2", "StreamedUIVec3", "StreamedUIVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "StreamedMat4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the fragment stage of the `program`"
        },
        {
          "name": "attributes",
          "type": "node_dict",
          "node_types": ["BufferFloat", "BufferVec2", "BufferVec3", "BufferVec4", "BufferMat4"],
          "flags": [],
          "desc": "extra vertex attributes made accessible to the `program`"
        },
        {
          "name": "instance_attributes",
          "type": "node_dict",
          "node_types": ["BufferFloat", "BufferVec2", "BufferVec3", "BufferVec4", "BufferMat4"],
          "flags": [],
          "desc": "per instance extra vertex attributes made accessible to the `program`"
        },
        {
          "name": "nb_instances",
          "type": "i32",
          "default": 1,
          "flags": [],
          "desc": "number of instances to draw"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blended together"
        }
      ]
    },
    "DrawColor": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "color",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "color of the shape"
        },
        {
          "name": "opacity",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the color"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawDisplace": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "source",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Texture2D"],
          "flags": ["nonull"],
          "desc": "source texture to displace"
        },
        {
          "name": "displacement",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Texture2D"],
          "flags": ["nonull"],
          "desc": "displacement vectors stored in a texture"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawGradient": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "color0",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "color of the first point"
        },
        {
          "name": "color1",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "color of the second point"
        },
        {
          "name": "opacity0",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the first color"
        },
        {
          "name": "opacity1",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the second color"
        },
        {
          "name": "pos0",
          "type": "vec2",
          "default": [0.000000,0.500000],
          "flags": ["live", "node"],
          "desc": "position of the first point (in UV coordinates)"
        },
        {
          "name": "pos1",
          "type": "vec2",
          "default": [1.000000,0.500000],
          "flags": ["live", "node"],
          "desc": "position of the second point (in UV coordinates)"
        },
        {
          "name": "mode",
          "type": "select",
          "default": "ramp",
          "choices": "gradient_mode",
          "flags": [],
          "desc": "mode of interpolation between the two points"
        },
        {
          "name": "linear",
          "type": "bool",
          "default": 1,
          "flags": ["live", "node"],
          "desc": "interpolate colors linearly"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawGradient4": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "color_tl",
          "type": "vec3",
          "default": [1.000000,0.500000,0.000000],
          "flags": ["live", "node"],
          "desc": "top-left color"
        },
        {
          "name": "color_tr",
          "type": "vec3",
          "default": [0.000000,1.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "top-right color"
        },
        {
          "name": "color_br",
          "type": "vec3",
          "default": [0.000000,0.500000,1.000000],
          "flags": ["live", "node"],
          "desc": "bottom-right color"
        },
        {
          "name": "color_bl",
          "type": "vec3",
          "default": [1.000000,0.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "bottom-left color"
        },
        {
          "name": "opacity_tl",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the top-left color"
        },
        {
          "name": "opacity_tr",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the top-right color"
        },
        {
          "name": "opacity_br",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the bottom-right color"
        },
        {
          "name": "opacity_bl",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity of the bottol-left color"
        },
        {
          "name": "linear",
          "type": "bool",
          "default": 1,
          "flags": ["live", "node"],
          "desc": "interpolate colors linearly"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawHistogram": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "stats",
          "type": "node",
          "node_types": ["ColorStats"],
          "flags": ["nonull"],
          "desc": "texture to render"
        },
        {
          "name": "mode",
          "type": "select",
          "default": "mixed",
          "choices": "scope_mode",
          "flags": [],
          "desc": "define how to represent the data"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawMask": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "content",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Texture2D"],
          "flags": ["nonull"],
          "desc": "content texture being masked"
        },
        {
          "name": "mask",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Texture2D"],
          "flags": ["nonull"],
          "desc": "texture serving as mask (only the red channel is used)"
        },
        {
          "name": "inverted",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "whether to dig into or keep"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawNoise": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "type",
          "type": "select",
          "default": "blocky",
          "choices": "noise_type",
          "flags": [],
          "desc": "noise type"
        },
        {
          "name": "amplitude",
          "type": "f32",
          "default": 1.000000,
          "flags": ["node"],
          "desc": "by how much it oscillates"
        },
        {
          "name": "octaves",
          "type": "u32",
          "default": 3,
          "flags": [],
          "desc": "number of accumulated noise layers (controls the level of details), must in [1,8]"
        },
        {
          "name": "lacunarity",
          "type": "f32",
          "default": 2.000000,
          "flags": ["node"],
          "desc": "frequency multiplier per octave"
        },
        {
          "name": "gain",
          "type": "f32",
          "default": 0.500000,
          "flags": ["node"],
          "desc": "amplitude multiplier per octave (also known as persistence)"
        },
        {
          "name": "seed",
          "type": "u32",
          "default": 0,
          "flags": ["node"],
          "desc": "random base seed"
        },
        {
          "name": "scale",
          "type": "vec2",
          "default": [32.000000,32.000000],
          "flags": ["node"],
          "desc": "size of the grid in lattice units"
        },
        {
          "name": "evolution",
          "type": "f32",
          "default": 0.000000,
          "flags": ["node"],
          "desc": "evolution of the 3rd non-spatial dimension, time if unspecified"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawPath": {
      "file": "src/node_drawpath.c",
      "params": [
        {
          "name": "path",
          "type": "node",
          "node_types": ["Path", "SmoothPath"],
          "flags": ["nonull"],
          "desc": "path to draw"
        },
        {
          "name": "box",
          "type": "vec4",
          "default": [-1.000000,-1.000000,2.000000,2.000000],
          "flags": [],
          "desc": "geometry box relative to screen (x, y, width, height)"
        },
        {
          "name": "viewbox",
          "type": "vec4",
          "default": [-1.000000,-1.000000,2.000000,2.000000],
          "flags": [],
          "desc": "vector space for interpreting the path (x, y, width, height)"
        },
        {
          "name": "pt_size",
          "type": "i32",
          "default": 54,
          "flags": [],
          "desc": "size in point (nominal size, 1pt = 1/72 inch)"
        },
        {
          "name": "dpi",
          "type": "i32",
          "default": 300,
          "flags": [],
          "desc": "resolution (dot per inch)"
        },
        {
          "name": "aspect_ratio",
          "type": "ivec2",
          "default": [1,1],
          "flags": [],
          "desc": "aspect ratio"
        },
        {
          "name": "color",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "path fill color"
        },
        {
          "name": "opacity",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "path fill opacity"
        },
        {
          "name": "outline",
          "type": "f32",
          "default": 0.005000,
          "flags": ["live", "node"],
          "desc": "path outline width"
        },
        {
          "name": "outline_color",
          "type": "vec3",
          "default": [1.000000,0.700000,0.000000],
          "flags": ["live", "node"],
          "desc": "path outline color"
        },
        {
          "name": "glow",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "path glow width"
        },
        {
          "name": "glow_color",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "path glow color"
        },
        {
          "name": "blur",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "path blur"
        }
      ]
    },
    "DrawTexture": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "texture",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Texture2D"],
          "flags": ["nonull"],
          "desc": "texture to render"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "DrawWaveform": {
      "file": "src/node_drawother.c",
      "params": [
        {
          "name": "stats",
          "type": "node",
          "node_types": ["ColorStats"],
          "flags": ["nonull"],
          "desc": "texture to render"
        },
        {
          "name": "mode",
          "type": "select",
          "default": "mixed",
          "choices": "scope_mode",
          "flags": [],
          "desc": "define how to represent the data"
        },
        {
          "name": "blending",
          "type": "select",
          "default": "default",
          "choices": "blend_preset",
          "flags": [],
          "desc": "define how this node and the current frame buffer are blending together"
        },
        {
          "name": "geometry",
          "type": "node",
          "node_types": ["Circle", "Geometry", "Quad", "Triangle"],
          "flags": [],
          "desc": "geometry to be rasterized"
        },
        {
          "name": "filters",
          "type": "node_list",
          "node_types": ["FilterAlpha", "FilterColorMap", "FilterContrast", "FilterExposure", "FilterInverseAlpha", "FilterLinear2sRGB", "FilterOpacity", "FilterPremult", "FilterSaturation", "FilterSelector", "FilterSRGB2Linear"],
          "flags": [],
          "desc": "filter chain to apply on top of this source"
        }
      ]
    },
    "FilterAlpha": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "alpha",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "alpha channel value"
        }
      ]
    },
    "FilterColorMap": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "colorkeys",
          "type": "node_list",
          "node_types": ["ColorKey"],
          "flags": [],
          "desc": "color keys to interpolate from"
        }
      ]
    },
    "FilterContrast": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "contrast",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "perceptual contrast value"
        },
        {
          "name": "pivot",
          "type": "f32",
          "default": 0.500000,
          "flags": ["live", "node"],
          "desc": "pivot point between light and dark"
        }
      ]
    },
    "FilterExposure": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "exposure",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "exposure"
        }
      ]
    },
    "FilterInverseAlpha": {
      "file": "src/node_filters.c",
      "params": [
      ]
    },
    "FilterLinear2sRGB": {
      "file": "src/node_filters.c",
      "params": [
      ]
    },
    "FilterOpacity": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "opacity",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "opacity value (color gets premultiplied by this value)"
        }
      ]
    },
    "FilterPremult": {
      "file": "src/node_filters.c",
      "params": [
      ]
    },
    "FilterSaturation": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "saturation",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "saturation"
        }
      ]
    },
    "FilterSelector": {
      "file": "src/node_filters.c",
      "params": [
        {
          "name": "range",
          "type": "vec2",
          "default": [0.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "values within this range are selected"
        },
        {
          "name": "component",
          "type": "select",
          "default": "lightness",
          "choices": "selector_component",
          "flags": [],
          "desc": "reference component for the selector comparison"
        },
        {
          "name": "drop_mode",
          "type": "select",
          "default": "outside",
          "choices": "selector_drop",
          "flags": [],
          "desc": "define how to interpret the `range` selector"
        },
        {
          "name": "output_mode",
          "type": "select",
          "default": "colorholes",
          "choices": "selector_output",
          "flags": [],
          "desc": "define the output color"
        },
        {
          "name": "smoothedges",
          "type": "bool",
          "default": 0,
          "flags": ["live", "node"],
          "desc": "make edges less sharp"
        }
      ]
    },
    "FilterSRGB2Linear": {
      "file": "src/node_filters.c",
      "params": [
      ]
    },
    "FastGaussianBlur": {
      "file": "src/node_fgblur.c",
      "params": [
        {
          "name": "source",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "source to use for the blur"
        },
        {
          "name": "destination",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "destination to use for the blur"
        },
        {
          "name": "bluriness",
          "type": "f32",
          "default": 0.030000,
          "flags": ["node"],
          "desc": "amount of bluriness in the range [0, 1]"
        }
      ]
    },
    "FontFace": {
      "file": "src/node_fontface.c",
      "params": [
        {
          "name": "path",
          "type": "str",
          "flags": ["nonull", "filepath"],
          "desc": "path to the font file"
        },
        {
          "name": "index",
          "type": "i32",
          "default": 0,
          "flags": [],
          "desc": "index of the face in the font file"
        }
      ]
    },
    "GaussianBlur": {
      "file": "src/node_gblur.c",
      "params": [
        {
          "name": "source",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "source to use for the blur"
        },
        {
          "name": "destination",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "destination to use for the blur"
        },
        {
          "name": "bluriness",
          "type": "f32",
          "default": 0.030000,
          "flags": ["node"],
          "desc": "amount of bluriness in the range [0,1] where 1 is equivalent of a blur radius of 126px"
        }
      ]
    },
    "Geometry": {
      "file": "src/node_geometry.c",
      "params": [
        {
          "name": "vertices",
          "type": "node",
          "node_types": ["BufferVec3", "AnimatedBufferVec3"],
          "flags": ["nonull"],
          "desc": "vertice coordinates defining the geometry"
        },
        {
          "name": "uvcoords",
          "type": "node",
          "node_types": ["BufferFloat", "BufferVec2", "BufferVec3", "AnimatedBufferFloat", "AnimatedBufferVec2", "AnimatedBufferVec3"],
          "flags": [],
          "desc": "coordinates used for UV mapping of each `vertices`"
        },
        {
          "name": "normals",
          "type": "node",
          "node_types": ["BufferVec3", "AnimatedBufferVec3"],
          "flags": [],
          "desc": "normal vectors of each `vertices`"
        },
        {
          "name": "indices",
          "type": "node",
          "node_types": ["BufferUShort", "BufferUInt"],
          "flags": [],
          "desc": "indices defining the drawing order of the `vertices`, auto-generated if not set"
        },
        {
          "name": "topology",
          "type": "select",
          "default": "triangle_list",
          "choices": "topology",
          "flags": [],
          "desc": "primitive topology"
        }
      ]
    },
    "GraphicConfig": {
      "file": "src/node_graphicconfig.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to which the graphic configuration will be applied"
        },
        {
          "name": "blend",
          "type": "bool",
          "default": -1,
          "flags": [],
          "desc": "enable blending"
        },
        {
          "name": "blend_src_factor",
          "type": "select",
          "default": "unset",
          "choices": "blend_factor",
          "flags": [],
          "desc": "blend source factor"
        },
        {
          "name": "blend_dst_factor",
          "type": "select",
          "default": "unset",
          "choices": "blend_factor",
          "flags": [],
          "desc": "blend destination factor"
        },
        {
          "name": "blend_src_factor_a",
          "type": "select",
          "default": "unset",
          "choices": "blend_factor",
          "flags": [],
          "desc": "alpha blend source factor"
        },
        {
          "name": "blend_dst_factor_a",
          "type": "select",
          "default": "unset",
          "choices": "blend_factor",
          "flags": [],
          "desc": "alpha blend destination factor"
        },
        {
          "name": "blend_op",
          "type": "select",
          "default": "unset",
          "choices": "blend_operation",
          "flags": [],
          "desc": "blend operation"
        },
        {
          "name": "blend_op_a",
          "type": "select",
          "default": "unset",
          "choices": "blend_operation",
          "flags": [],
          "desc": "alpha blend operation"
        },
        {
          "name": "color_write_mask",
          "type": "flags",
          "default": "unset",
          "choices": "component",
          "flags": [],
          "desc": "color write mask"
        },
        {
          "name": "depth_test",
          "type": "bool",
          "default": -1,
          "flags": [],
          "desc": "enable depth testing"
        },
        {
          "name": "depth_write_mask",
          "type": "bool",
          "default": -1,
          "flags": [],
          "desc": "depth write mask"
        },
        {
          "name": "depth_func",
          "type": "select",
          "default": "unset",
          "choices": "function",
          "flags": [],
          "desc": "passes if `<function>(depth, stored_depth)`"
        },
        {
          "name": "stencil_test",
          "type": "bool",
          "default": -1,
          "flags": [],
          "desc": "enable stencil testing"
        },
        {
          "name": "stencil_write_mask",
          "type": "i32",
          "default": -1,
          "flags": [],
          "desc": "stencil write mask, must be in the range [0, 0xff]"
        },
        {
          "name": "stencil_func",
          "type": "select",
          "default": "unset",
          "choices": "function",
          "flags": [],
          "desc": "passes if `<function>(stencil_ref & stencil_read_mask, stencil & stencil_read_mask)`"
        },
        {
          "name": "stencil_ref",
          "type": "i32",
          "default": -1,
          "flags": [],
          "desc": "stencil reference value to compare against"
        },
        {
          "name": "stencil_read_mask",
          "type": "i32",
          "default": -1,
          "flags": [],
          "desc": "stencil read mask, must be in the range [0, 0xff]"
        },
        {
          "name": "stencil_fail",
          "type": "select",
          "default": "unset",
          "choices": "stencil_operation",
          "flags": [],
          "desc": "operation to execute if stencil test fails"
        },
        {
          "name": "stencil_depth_fail",
          "type": "select",
          "default": "unset",
          "choices": "stencil_operation",
          "flags": [],
          "desc": "operation to execute if depth test fails"
        },
        {
          "name": "stencil_depth_pass",
          "type": "select",
          "default": "unset",
          "choices": "stencil_operation",
          "flags": [],
          "desc": "operation to execute if stencil and depth test pass"
        },
        {
          "name": "cull_mode",
          "type": "select",
          "default": "unset",
          "choices": "cull_mode",
          "flags": [],
          "desc": "face culling mode"
        },
        {
          "name": "scissor",
          "type": "uvec4",
          "default": [0,0,0,0],
          "flags": [],
          "desc": "define an area where all pixels outside are discarded"
        }
      ]
    },
    "GridLayout": {
      "file": "src/node_gridlayout.c",
      "params": [
        {
          "name": "children",
          "type": "node_list",
          "flags": [],
          "desc": "a set of scenes"
        },
        {
          "name": "size",
          "type": "ivec2",
          "default": [-1,-1],
          "flags": [],
          "desc": "number of cols and rows in the grid"
        }
      ]
    },
    "Group": {
      "file": "src/node_group.c",
      "params": [
        {
          "name": "children",
          "type": "node_list",
          "flags": [],
          "desc": "a set of scenes"
        }
      ]
    },
    "HexagonalBlur": {
      "file": "src/node_hblur.c",
      "params": [
        {
          "name": "source",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "source to use for the blur"
        },
        {
          "name": "destination",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": ["nonull"],
          "desc": "destination to use for the blur"
        },
        {
          "name": "amount",
          "type": "f32",
          "default": 0.000000,
          "flags": ["node"],
          "desc": "amount of bluriness in the range [0,1]"
        },
        {
          "name": "map",
          "type": "node",
          "node_types": ["Texture2D"],
          "flags": [],
          "desc": "blur map providing the CoC (circle of confusion) for each pixels (only the red channel is used)"
        }
      ]
    },
    "Identity": {
      "file": "src/node_identity.c",
      "params": [
      ]
    },
    "_IOVar": {
      "file": "src/node_io.c",
      "params": [
        {
          "name": "precision_out",
          "type": "select",
          "default": "auto",
          "choices": "precision",
          "flags": [],
          "desc": "precision qualifier for the output side (vertex)"
        },
        {
          "name": "precision_in",
          "type": "select",
          "default": "auto",
          "choices": "precision",
          "flags": [],
          "desc": "precision qualifier for the input side (fragment)"
        }
      ]
    },
    "IOInt": "_IOVar",
    "IOIVec2": "_IOVar",
    "IOIVec3": "_IOVar",
    "IOIVec4": "_IOVar",
    "IOUInt": "_IOVar",
    "IOUIvec2": "_IOVar",
    "IOUIvec3": "_IOVar",
    "IOUIvec4": "_IOVar",
    "IOFloat": "_IOVar",
    "IOVec2": "_IOVar",
    "IOVec3": "_IOVar",
    "IOVec4": "_IOVar",
    "IOMat3": "_IOVar",
    "IOMat4": "_IOVar",
    "IOBool": "_IOVar",
    "EvalFloat": {
      "file": "src/node_eval.c",
      "params": [
        {
          "name": "expr0",
          "type": "str",
          "default": "0",
          "flags": ["nonull"],
          "desc": "expression to evaluate"
        },
        {
          "name": "resources",
          "type": "node_dict",
          "node_types": ["NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the `expr0`"
        }
      ]
    },
    "EvalVec2": {
      "file": "src/node_eval.c",
      "params": [
        {
          "name": "expr0",
          "type": "str",
          "default": "0",
          "flags": ["nonull"],
          "desc": "expression to evaluate to define 1st component"
        },
        {
          "name": "expr1",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 2nd component"
        },
        {
          "name": "resources",
          "type": "node_dict",
          "node_types": ["NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the `expr0` and `expr1`"
        }
      ]
    },
    "EvalVec3": {
      "file": "src/node_eval.c",
      "params": [
        {
          "name": "expr0",
          "type": "str",
          "default": "0",
          "flags": ["nonull"],
          "desc": "expression to evaluate to define 1st component"
        },
        {
          "name": "expr1",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 2nd component"
        },
        {
          "name": "expr2",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 3rd component"
        },
        {
          "name": "resources",
          "type": "node_dict",
          "node_types": ["NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the `expr0`, `expr1` and `expr2`"
        }
      ]
    },
    "EvalVec4": {
      "file": "src/node_eval.c",
      "params": [
        {
          "name": "expr0",
          "type": "str",
          "default": "0",
          "flags": ["nonull"],
          "desc": "expression to evaluate to define 1st component"
        },
        {
          "name": "expr1",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 2nd component"
        },
        {
          "name": "expr2",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 3rd component"
        },
        {
          "name": "expr3",
          "type": "str",
          "flags": [],
          "desc": "expression to evaluate to define 4th component"
        },
        {
          "name": "resources",
          "type": "node_dict",
          "node_types": ["NoiseFloat", "NoiseVec2", "NoiseVec3", "NoiseVec4", "EvalFloat", "EvalVec2", "EvalVec3", "EvalVec4", "UniformFloat", "UniformVec2", "UniformVec3", "UniformVec4", "UniformColor", "AnimatedFloat", "AnimatedVec2", "AnimatedVec3", "AnimatedVec4", "StreamedFloat", "StreamedVec2", "StreamedVec3", "StreamedVec4", "Time", "VelocityFloat", "VelocityVec2", "VelocityVec3", "VelocityVec4"],
          "flags": [],
          "desc": "resources made accessible to the `expr0`, `expr1`, `expr2` and `expr3`"
        }
      ]
    },
    "Media": {
      "file": "src/node_media.c",
      "params": [
        {
          "name": "filename",
          "type": "str",
          "flags": ["live", "nonull", "filepath"],
          "desc": "path to input media file"
        },
        {
          "name": "nopemd_min_level",
          "type": "select",
          "default": "warning",
          "choices": "nopemd_log_level",
          "flags": [],
          "desc": "nope.media min logging level"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        },
        {
          "name": "audio_tex",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "load the audio and expose it as a stereo waves and frequencies buffer"
        },
        {
          "name": "max_nb_packets",
          "type": "i32",
          "default": 1,
          "flags": [],
          "desc": "maximum number of packets in nope.media demuxing queue"
        },
        {
          "name": "max_nb_frames",
          "type": "i32",
          "default": 1,
          "flags": [],
          "desc": "maximum number of frames in nope.media decoding queue"
        },
        {
          "name": "max_nb_sink",
          "type": "i32",
          "default": 1,
          "flags": [],
          "desc": "maximum number of frames in nope.media filtering queue"
        },
        {
          "name": "max_pixels",
          "type": "i32",
          "default": 0,
          "flags": [],
          "desc": "maximum number of pixels per frame"
        },
        {
          "name": "stream_idx",
          "type": "i32",
          "default": -1,
          "flags": [],
          "desc": "force a stream number instead of picking the \"best\" one"
        },
        {
          "name": "hwaccel",
          "type": "select",
          "default": "auto",
          "choices": "nopemd_hwaccel",
          "flags": [],
          "desc": "hardware acceleration"
        },
        {
          "name": "filters",
          "type": "str",
          "flags": [],
          "desc": "filters to apply on the media (nope.media/libavfilter)"
        },
        {
          "name": "vt_pix_fmt",
          "type": "str",
          "default": "auto",
          "flags": [],
          "desc": "auto or a comma or space separated list of VideoToolbox (Apple) allowed output pixel formats"
        }
      ]
    },
    "_Noise": {
      "file": "src/node_noise.c",
      "params": [
        {
          "name": "frequency",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live"],
          "desc": "oscillation per second"
        },
        {
          "name": "amplitude",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live"],
          "desc": "by how much it oscillates"
        },
        {
          "name": "octaves",
          "type": "i32",
          "default": 3,
          "flags": ["live"],
          "desc": "number of accumulated noise layers (controls the level of details)"
        },
        {
          "name": "lacunarity",
          "type": "f32",
          "default": 2.000000,
          "flags": ["live"],
          "desc": "frequency multiplier per octave"
        },
        {
          "name": "gain",
          "type": "f32",
          "default": 0.500000,
          "flags": ["live"],
          "desc": "amplitude multiplier per octave (also known as persistence)"
        },
        {
          "name": "seed",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "random base seed (acts as an offsetting to the time)"
        },
        {
          "name": "interpolant",
          "type": "select",
          "default": "quintic",
          "choices": "interp_noise",
          "flags": [],
          "desc": "interpolation function to use between noise points"
        }
      ]
    },
    "NoiseFloat": "_Noise",
    "NoiseVec2": "_Noise",
    "NoiseVec3": "_Noise",
    "NoiseVec4": "_Noise",
    "Path": {
      "file": "src/node_path.c",
      "params": [
        {
          "name": "keyframes",
          "type": "node_list",
          "node_types": ["PathKeyMove", "PathKeyLine", "PathKeyBezier2", "PathKeyBezier3", "PathKeyClose"],
          "flags": ["nonull"],
          "desc": "anchor points the path go through"
        },
        {
          "name": "precision",
          "type": "i32",
          "default": 64,
          "flags": [],
          "desc": "number of divisions per curve segment"
        }
      ]
    },
    "PathKeyBezier2": {
      "file": "src/node_pathkey.c",
      "params": [
        {
          "name": "control",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "control point"
        },
        {
          "name": "to",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "end point of the curve, new cursor position"
        }
      ]
    },
    "PathKeyBezier3": {
      "file": "src/node_pathkey.c",
      "params": [
        {
          "name": "control1",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "first control point"
        },
        {
          "name": "control2",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "second control point"
        },
        {
          "name": "to",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "end point of the curve, new cursor position"
        }
      ]
    },
    "PathKeyClose": {
      "file": "src/node_pathkey.c",
      "params": [
      ]
    },
    "PathKeyLine": {
      "file": "src/node_pathkey.c",
      "params": [
        {
          "name": "to",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "end point of the line, new cursor position"
        }
      ]
    },
    "PathKeyMove": {
      "file": "src/node_pathkey.c",
      "params": [
        {
          "name": "to",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "new cursor position"
        }
      ]
    },
    "Program": {
      "file": "src/node_program.c",
      "params": [
        {
          "name": "vertex",
          "type": "str",
          "flags": ["nonull"],
          "desc": "vertex shader"
        },
        {
          "name": "fragment",
          "type": "str",
          "flags": ["nonull"],
          "desc": "fragment shader"
        },
        {
          "name": "properties",
          "type": "node_dict",
          "node_types": ["ResourceProps"],
          "flags": [],
          "desc": "resource properties"
        },
        {
          "name": "vert_out_vars",
          "type": "node_dict",
          "node_types": ["IOInt", "IOIVec2", "IOIVec3", "IOIVec4", "IOUInt", "IOUIvec2", "IOUIvec3", "IOUIvec4", "IOFloat", "IOVec2", "IOVec3", "IOVec4", "IOMat3", "IOMat4", "IOBool"],
          "flags": [],
          "desc": "in/out communication variables shared between vertex and fragment stages"
        },
        {
          "name": "nb_frag_output",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of color outputs in the fragment shader"
        }
      ]
    },
    "Quad": {
      "file": "src/node_quad.c",
      "params": [
        {
          "name": "corner",
          "type": "vec3",
          "default": [-0.500000,-0.500000,0.000000],
          "flags": [],
          "desc": "origin coordinates of `width` and `height` vectors"
        },
        {
          "name": "width",
          "type": "vec3",
          "default": [1.000000,0.000000,0.000000],
          "flags": [],
          "desc": "width vector"
        },
        {
          "name": "height",
          "type": "vec3",
          "default": [0.000000,1.000000,0.000000],
          "flags": [],
          "desc": "height vector"
        },
        {
          "name": "uv_corner",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": [],
          "desc": "origin coordinates of `uv_width` and `uv_height` vectors"
        },
        {
          "name": "uv_width",
          "type": "vec2",
          "default": [1.000000,0.000000],
          "flags": [],
          "desc": "UV coordinates width vector"
        },
        {
          "name": "uv_height",
          "type": "vec2",
          "default": [0.000000,1.000000],
          "flags": [],
          "desc": "UV coordinates height vector"
        }
      ]
    },
    "RenderToTexture": {
      "file": "src/node_rtt.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to be rasterized to `color_textures` and optionally to `depth_texture`"
        },
        {
          "name": "color_textures",
          "type": "node_list",
          "node_types": ["Texture2D", "Texture2DArray", "Texture3D", "TextureCube", "TextureView"],
          "flags": [],
          "desc": "destination color texture"
        },
        {
          "name": "depth_texture",
          "type": "node",
          "node_types": ["Texture2D", "TextureView"],
          "flags": [],
          "desc": "destination depth (and potentially combined stencil) texture"
        },
        {
          "name": "samples",
          "type": "i32",
          "default": 0,
          "flags": [],
          "desc": "number of samples used for multisampling anti-aliasing"
        },
        {
          "name": "clear_color",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "color used to clear the `color_texture`"
        },
        {
          "name": "forward_transforms",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "enable forwarding of camera/model transformations"
        }
      ]
    },
    "ResourceProps": {
      "file": "src/node_resourceprops.c",
      "params": [
        {
          "name": "precision",
          "type": "select",
          "default": "auto",
          "choices": "precision",
          "flags": [],
          "desc": "precision qualifier for the shader"
        },
        {
          "name": "as_image",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "flag this resource for image accessing (only applies to texture nodes)"
        },
        {
          "name": "writable",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "flag this resource as writable in the shader"
        }
      ]
    },
    "Rotate": {
      "file": "src/node_rotate.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to rotate"
        },
        {
          "name": "angle",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "rotation angle in degrees"
        },
        {
          "name": "axis",
          "type": "vec3",
          "default": [0.000000,0.000000,1.000000],
          "flags": [],
          "desc": "rotation axis"
        },
        {
          "name": "anchor",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "vector to the center point of the rotation"
        }
      ]
    },
    "RotateQuat": {
      "file": "src/node_rotatequat.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to rotate"
        },
        {
          "name": "quat",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "quaternion"
        },
        {
          "name": "anchor",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "vector to the center point of the rotation"
        }
      ]
    },
    "Scale": {
      "file": "src/node_scale.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to scale"
        },
        {
          "name": "factors",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "scaling factors (how much to scale on each axis)"
        },
        {
          "name": "anchor",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "vector to the center point of the scale"
        }
      ]
    },
    "Skew": {
      "file": "src/node_skew.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to skew"
        },
        {
          "name": "angles",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "skewing angles, only components forming a plane opposite to `axis` should be set"
        },
        {
          "name": "axis",
          "type": "vec3",
          "default": [1.000000,0.000000,0.000000],
          "flags": [],
          "desc": "skew axis"
        },
        {
          "name": "anchor",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "vector to the center point of the skew"
        }
      ]
    },
    "SmoothPath": {
      "file": "src/node_smoothpath.c",
      "params": [
        {
          "name": "points",
          "type": "node",
          "node_types": ["BufferVec3"],
          "flags": ["nonull"],
          "desc": "anchor points the path go through"
        },
        {
          "name": "control1",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "initial control point"
        },
        {
          "name": "control2",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "final control point"
        },
        {
          "name": "precision",
          "type": "i32",
          "default": 64,
          "flags": [],
          "desc": "number of divisions per curve segment"
        },
        {
          "name": "tension",
          "type": "f32",
          "default": 0.500000,
          "flags": [],
          "desc": "tension between points"
        }
      ]
    },
    "Text": {
      "file": "src/node_text.c",
      "params": [
        {
          "name": "text",
          "type": "str",
          "default": "",
          "flags": ["live", "nonull"],
          "desc": "text string to rasterize"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "fg_color",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": ["live"],
          "desc": "foreground text color"
        },
        {
          "name": "fg_opacity",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live"],
          "desc": "foreground text opacity"
        },
        {
          "name": "bg_color",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live"],
          "desc": "background text color"
        },
        {
          "name": "bg_opacity",
          "type": "f32",
          "default": 0.800000,
          "flags": ["live"],
          "desc": "background text opacity"
        },
        {
          "name": "box",
          "type": "vec4",
          "default": [-1.000000,-1.000000,2.000000,2.000000],
          "flags": [],
          "desc": "geometry box relative to screen (x, y, width, height)"
        },
        {
          "name": "font_faces",
          "type": "node_list",
          "node_types": ["FontFace"],
          "flags": [],
          "desc": "font faces in order of preferences (require build with external text libraries)"
        },
        {
          "name": "padding",
          "type": "i32",
          "default": 4,
          "flags": [],
          "desc": "padding around the text, in point units"
        },
        {
          "name": "pt_size",
          "type": "i32",
          "default": 54,
          "flags": [],
          "desc": "characters size in point (nominal size, 1pt = 1/72 inch)"
        },
        {
          "name": "dpi",
          "type": "i32",
          "default": 96,
          "flags": [],
          "desc": "resolution (dot per inch)"
        },
        {
          "name": "font_scale",
          "type": "f32",
          "default": 1.000000,
          "flags": [],
          "desc": "scaling of the font"
        },
        {
          "name": "scale_mode",
          "type": "select",
          "default": "auto",
          "choices": "scale_mode",
          "flags": [],
          "desc": "scaling behaviour for the characters"
        },
        {
          "name": "effects",
          "type": "node_list",
          "node_types": ["TextEffect"],
          "flags": [],
          "desc": "stack of effects"
        },
        {
          "name": "valign",
          "type": "select",
          "default": "center",
          "choices": "valign",
          "flags": [],
          "desc": "vertical alignment of the text in the box"
        },
        {
          "name": "halign",
          "type": "select",
          "default": "center",
          "choices": "halign",
          "flags": [],
          "desc": "horizontal alignment of the text in the box"
        },
        {
          "name": "writing_mode",
          "type": "select",
          "default": "horizontal-tb",
          "choices": "writing_mode",
          "flags": [],
          "desc": "direction flow per character and line"
        }
      ]
    },
    "TextEffect": {
      "file": "src/node_texteffect.c",
      "params": [
        {
          "name": "start",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "absolute start time of the effect"
        },
        {
          "name": "end",
          "type": "f64",
          "default": -1.000000,
          "flags": [],
          "desc": "absolute end time of the effect, negative for scene duration"
        },
        {
          "name": "target",
          "type": "select",
          "default": "text",
          "choices": "text_target",
          "flags": [],
          "desc": "segmentation target of the effect"
        },
        {
          "name": "random",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "randomize the order the effect are applied on the target"
        },
        {
          "name": "random_seed",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "random seed for the `random` parameter"
        },
        {
          "name": "start_pos",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "normalized text position where the effect starts"
        },
        {
          "name": "end_pos",
          "type": "f32",
          "default": 1.000000,
          "flags": ["live", "node"],
          "desc": "normalized text position where the effect ends"
        },
        {
          "name": "overlap",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live", "node"],
          "desc": "overlap factor between target elements"
        },
        {
          "name": "transform",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Identity"],
          "flags": [],
          "desc": "transformation chain"
        },
        {
          "name": "anchor",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": ["live"],
          "desc": "anchor coordinates for the transformations"
        },
        {
          "name": "anchor_ref",
          "type": "select",
          "default": "char",
          "choices": "anchor_ref",
          "flags": [],
          "desc": "how to interpret `anchor` coordinates"
        },
        {
          "name": "color",
          "type": "vec3",
          "default": [-1.000000,-1.000000,-1.000000],
          "flags": ["live", "node"],
          "desc": "characters fill color, use negative values for unchanged from previous text effects (default is `Text.fg_color`)"
        },
        {
          "name": "opacity",
          "type": "f32",
          "default": -1.000000,
          "flags": ["live", "node"],
          "desc": "characters opacity, use negative value for unchanged from previous text effects (default is `Text.opacity`)"
        },
        {
          "name": "outline",
          "type": "f32",
          "default": -1.000000,
          "flags": ["live", "node"],
          "desc": "characters outline width, use negative value for unchanged from previous text effects (default is 0)"
        },
        {
          "name": "outline_color",
          "type": "vec3",
          "default": [-1.000000,-1.000000,-1.000000],
          "flags": ["live", "node"],
          "desc": "characters outline color, use negative value for unchanged from previous text effects (default is yellow, (1, 1, 0))"
        },
        {
          "name": "glow",
          "type": "f32",
          "default": -1.000000,
          "flags": ["live", "node"],
          "desc": "characters glow width, use negative value for unchanged from previous text effects (default is 0)"
        },
        {
          "name": "glow_color",
          "type": "vec3",
          "default": [-1.000000,-1.000000,-1.000000],
          "flags": ["live", "node"],
          "desc": "characters glow color, use negative value for unchanged from previous text effects (default is white, (1, 1, 1))"
        },
        {
          "name": "blur",
          "type": "f32",
          "default": -1.000000,
          "flags": ["live", "node"],
          "desc": "characters blur, use negative value for unchanged from previous text effects (default is 0)"
        }
      ]
    },
    "Texture2D": {
      "file": "src/node_texture.c",
      "params": [
        {
          "name": "format",
          "type": "select",
          "default": "r8g8b8a8_unorm",
          "choices": "format",
          "flags": [],
          "desc": "format of the pixel data"
        },
        {
          "name": "width",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "width of the texture"
        },
        {
          "name": "height",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "height of the texture"
        },
        {
          "name": "min_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture minifying function"
        },
        {
          "name": "mag_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture magnification function"
        },
        {
          "name": "mipmap_filter",
          "type": "select",
          "default": "none",
          "choices": "mipmap_filter",
          "flags": [],
          "desc": "texture minifying mipmap function"
        },
        {
          "name": "wrap_s",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the s dimension (horizontal)"
        },
        {
          "name": "wrap_t",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the t dimension (vertical)"
        },
        {
          "name": "data_src",
          "type": "node",
          "flags": [],
          "desc": "data source"
        },
        {
          "name": "direct_rendering",
          "type": "bool",
          "default": 1,
          "flags": [],
          "desc": "whether direct rendering is allowed or not for media playback"
        },
        {
          "name": "clamp_video",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "clamp ngl_texvideo() output to [0,1]"
        },
        {
          "name": "clear_color",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "color used to clear the texture when used as an implicit render target"
        },
        {
          "name": "forward_transforms",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "enable forwarding of camera/model transformations when used as an implicit render target"
        }
      ]
    },
    "Texture2DArray": {
      "file": "src/node_texture.c",
      "params": [
        {
          "name": "format",
          "type": "select",
          "default": "r8g8b8a8_unorm",
          "choices": "format",
          "flags": [],
          "desc": "format of the pixel data"
        },
        {
          "name": "width",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "width of the texture"
        },
        {
          "name": "height",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "height of the texture"
        },
        {
          "name": "depth",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "depth of the texture"
        },
        {
          "name": "min_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture minifying function"
        },
        {
          "name": "mag_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture magnification function"
        },
        {
          "name": "mipmap_filter",
          "type": "select",
          "default": "none",
          "choices": "mipmap_filter",
          "flags": [],
          "desc": "texture minifying mipmap function"
        },
        {
          "name": "wrap_s",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the s dimension (horizontal)"
        },
        {
          "name": "wrap_t",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the t dimension (vertical)"
        },
        {
          "name": "wrap_r",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the r dimension (depth)"
        },
        {
          "name": "data_src",
          "type": "node",
          "node_types": ["AnimatedBufferFloat", "AnimatedBufferVec2", "AnimatedBufferVec4", "BufferByte", "BufferBVec2", "BufferBVec4", "BufferInt", "BufferIVec2", "BufferIVec4", "BufferShort", "BufferSVec2", "BufferSVec4", "BufferUByte", "BufferUBVec2", "BufferUBVec4", "BufferUInt", "BufferUIVec2", "BufferUIVec4", "BufferUShort", "BufferUSVec2", "BufferUSVec4", "BufferFloat", "BufferVec2", "BufferVec4"],
          "flags": [],
          "desc": "data source"
        }
      ]
    },
    "Texture3D": {
      "file": "src/node_texture.c",
      "params": [
        {
          "name": "format",
          "type": "select",
          "default": "r8g8b8a8_unorm",
          "choices": "format",
          "flags": [],
          "desc": "format of the pixel data"
        },
        {
          "name": "width",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "width of the texture"
        },
        {
          "name": "height",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "height of the texture"
        },
        {
          "name": "depth",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "depth of the texture"
        },
        {
          "name": "min_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture minifying function"
        },
        {
          "name": "mag_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture magnification function"
        },
        {
          "name": "mipmap_filter",
          "type": "select",
          "default": "none",
          "choices": "mipmap_filter",
          "flags": [],
          "desc": "texture minifying mipmap function"
        },
        {
          "name": "wrap_s",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the s dimension (horizontal)"
        },
        {
          "name": "wrap_t",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the t dimension (vertical)"
        },
        {
          "name": "wrap_r",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the r dimension (depth)"
        },
        {
          "name": "data_src",
          "type": "node",
          "node_types": ["AnimatedBufferFloat", "AnimatedBufferVec2", "AnimatedBufferVec4", "BufferByte", "BufferBVec2", "BufferBVec4", "BufferInt", "BufferIVec2", "BufferIVec4", "BufferShort", "BufferSVec2", "BufferSVec4", "BufferUByte", "BufferUBVec2", "BufferUBVec4", "BufferUInt", "BufferUIVec2", "BufferUIVec4", "BufferUShort", "BufferUSVec2", "BufferUSVec4", "BufferFloat", "BufferVec2", "BufferVec4"],
          "flags": [],
          "desc": "data source"
        }
      ]
    },
    "TextureCube": {
      "file": "src/node_texture.c",
      "params": [
        {
          "name": "format",
          "type": "select",
          "default": "r8g8b8a8_unorm",
          "choices": "format",
          "flags": [],
          "desc": "format of the pixel data"
        },
        {
          "name": "size",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "width and height of the texture"
        },
        {
          "name": "min_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture minifying function"
        },
        {
          "name": "mag_filter",
          "type": "select",
          "default": "linear",
          "choices": "filter",
          "flags": [],
          "desc": "texture magnification function"
        },
        {
          "name": "mipmap_filter",
          "type": "select",
          "default": "none",
          "choices": "mipmap_filter",
          "flags": [],
          "desc": "texture minifying mipmap function"
        },
        {
          "name": "wrap_s",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the s dimension (horizontal)"
        },
        {
          "name": "wrap_t",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the t dimension (vertical)"
        },
        {
          "name": "wrap_r",
          "type": "select",
          "default": "clamp_to_edge",
          "choices": "wrap",
          "flags": [],
          "desc": "wrap parameter for the texture on the r dimension (depth)"
        },
        {
          "name": "data_src",
          "type": "node",
          "node_types": ["AnimatedBufferFloat", "AnimatedBufferVec2", "AnimatedBufferVec4", "BufferByte", "BufferBVec2", "BufferBVec4", "BufferInt", "BufferIVec2", "BufferIVec4", "BufferShort", "BufferSVec2", "BufferSVec4", "BufferUByte", "BufferUBVec2", "BufferUBVec4", "BufferUInt", "BufferUIVec2", "BufferUIVec4", "BufferUShort", "BufferUSVec2", "BufferUSVec4", "BufferFloat", "BufferVec2", "BufferVec4"],
          "flags": [],
          "desc": "data source"
        }
      ]
    },
    "TextureView": {
      "file": "src/node_textureview.c",
      "params": [
        {
          "name": "texture",
          "type": "node",
          "node_types": ["Texture2D", "Texture2DArray", "Texture3D", "TextureCube"],
          "flags": ["nonull"],
          "desc": "texture used for the view"
        },
        {
          "name": "layer",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "texture layer used for the view"
        }
      ]
    },
    "Time": {
      "file": "src/node_time.c",
      "params": [
      ]
    },
    "TimeRangeFilter": {
      "file": "src/node_timerangefilter.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "time filtered scene"
        },
        {
          "name": "start",
          "type": "f64",
          "default": 0.000000,
          "flags": [],
          "desc": "start time (included) for the scene to be drawn"
        },
        {
          "name": "end",
          "type": "f64",
          "default": -1.000000,
          "flags": [],
          "desc": "end time (excluded) for the scene to be drawn, a negative value implies forever"
        },
        {
          "name": "render_time",
          "type": "f64",
          "default": -1.000000,
          "flags": [],
          "desc": "chosen time to draw for a \"once\" mode, negative to ignore"
        },
        {
          "name": "prefetch_time",
          "type": "f64",
          "default": 1.000000,
          "flags": [],
          "desc": "`child` is prefetched `prefetch_time` seconds in advance"
        }
      ]
    },
    "Transform": {
      "file": "src/node_transform.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to apply the transform to"
        },
        {
          "name": "matrix",
          "type": "mat4",
          "default": [1.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000],
          "flags": ["live", "node"],
          "desc": "transformation matrix"
        }
      ]
    },
    "Translate": {
      "file": "src/node_translate.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to translate"
        },
        {
          "name": "vector",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live", "node"],
          "desc": "translation vector"
        }
      ]
    },
    "Triangle": {
      "file": "src/node_triangle.c",
      "params": [
        {
          "name": "edge0",
          "type": "vec3",
          "default": [1.000000,-1.000000,0.000000],
          "flags": [],
          "desc": "first edge coordinate of the triangle"
        },
        {
          "name": "edge1",
          "type": "vec3",
          "default": [0.000000,1.000000,0.000000],
          "flags": [],
          "desc": "second edge coordinate of the triangle"
        },
        {
          "name": "edge2",
          "type": "vec3",
          "default": [-1.000000,-1.000000,0.000000],
          "flags": [],
          "desc": "third edge coordinate of the triangle"
        },
        {
          "name": "uv_edge0",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": [],
          "desc": "UV coordinate associated with `edge0`"
        },
        {
          "name": "uv_edge1",
          "type": "vec2",
          "default": [0.000000,1.000000],
          "flags": [],
          "desc": "UV coordinate associated with `edge1`"
        },
        {
          "name": "uv_edge2",
          "type": "vec2",
          "default": [1.000000,1.000000],
          "flags": [],
          "desc": "UV coordinate associated with `edge2`"
        }
      ]
    },
    "StreamedInt": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferInt"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedIVec2": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedIVec3": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedIVec4": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedUInt": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUInt"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedUIVec2": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedUIVec3": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedUIVec4": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedFloat": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferFloat"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedVec2": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedVec3": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedVec4": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedMat4": {
      "file": "src/node_streamed.c",
      "params": [
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferMat4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferInt": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferInt"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferIVec2": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferIVec3": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferIVec4": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferIVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferUInt": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUInt"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferUIVec2": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferUIVec3": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferUIVec4": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferUIVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferFloat": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferFloat"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferVec2": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec2"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferVec3": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec3"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferVec4": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferVec4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "StreamedBufferMat4": {
      "file": "src/node_streamedbuffer.c",
      "params": [
        {
          "name": "count",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "number of elements for each chunk of data to stream"
        },
        {
          "name": "timestamps",
          "type": "node",
          "node_types": ["BufferInt64"],
          "flags": ["nonull"],
          "desc": "timestamps associated with each chunk of data to stream"
        },
        {
          "name": "buffer",
          "type": "node",
          "node_types": ["BufferMat4"],
          "flags": ["nonull"],
          "desc": "buffer containing the data to stream"
        },
        {
          "name": "timebase",
          "type": "rational",
          "default": [1,1000000],
          "flags": [],
          "desc": "time base in which the `timestamps` are represented"
        },
        {
          "name": "time_anim",
          "type": "node",
          "node_types": ["AnimatedTime"],
          "flags": [],
          "desc": "time remapping animation (must use a `linear` interpolation)"
        }
      ]
    },
    "UniformBool": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "bool",
          "default": 0,
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        }
      ]
    },
    "UniformInt": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "i32",
          "default": 0,
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "i32",
          "default": -100,
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "i32",
          "default": 100,
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformIVec2": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "ivec2",
          "default": [0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "ivec2",
          "default": [-100,-100],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "ivec2",
          "default": [100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformIVec3": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "ivec3",
          "default": [0,0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "ivec3",
          "default": [-100,-100,-100],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "ivec3",
          "default": [100,100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformIVec4": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "ivec4",
          "default": [0,0,0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "ivec4",
          "default": [-100,-100,-100,-100],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "ivec4",
          "default": [100,100,100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformUInt": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "u32",
          "default": 0,
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "u32",
          "default": 0,
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "u32",
          "default": 100,
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformUIVec2": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "uvec2",
          "default": [0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "uvec2",
          "default": [0,0],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "uvec2",
          "default": [100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformUIVec3": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "uvec3",
          "default": [0,0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "uvec3",
          "default": [0,0,0],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "uvec3",
          "default": [100,100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformUIVec4": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "uvec4",
          "default": [0,0,0,0],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "uvec4",
          "default": [0,0,0,0],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "uvec4",
          "default": [100,100,100,100],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformMat4": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "mat4",
          "default": [1.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000,0.000000,0.000000,0.000000,0.000000,1.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "transform",
          "type": "node",
          "node_types": ["Rotate", "RotateQuat", "Transform", "Translate", "Scale", "Skew", "Identity"],
          "flags": [],
          "desc": "`value` transformation chain"
        }
      ]
    },
    "UniformFloat": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "f32",
          "default": 0.000000,
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "f32",
          "default": 0.000000,
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "f32",
          "default": 1.000000,
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformVec2": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "vec2",
          "default": [0.000000,0.000000],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "vec2",
          "default": [1.000000,1.000000],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformVec3": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformVec4": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "vec4",
          "default": [1.000000,1.000000,1.000000,1.000000],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        }
      ]
    },
    "UniformColor": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "vec3",
          "default": [0.000000,0.000000,0.000000],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "vec3",
          "default": [1.000000,1.000000,1.000000],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "space",
          "type": "select",
          "default": "srgb",
          "choices": "colorspace",
          "flags": [],
          "desc": "color space defining how to interpret `value`"
        }
      ]
    },
    "UniformQuat": {
      "file": "src/node_uniform.c",
      "params": [
        {
          "name": "value",
          "type": "vec4",
          "default": [0.000000,0.000000,0.000000,1.000000],
          "flags": ["live"],
          "desc": "value exposed to the shader"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "vec4",
          "default": [-1.000000,-1.000000,-1.000000,-1.000000],
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "vec4",
          "default": [1.000000,1.000000,1.000000,1.000000],
          "flags": [],
          "desc": "maximum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "as_mat4",
          "type": "bool",
          "default": 0,
          "flags": [],
          "desc": "exposed as a 4x4 rotation matrix in the program"
        }
      ]
    },
    "UserSelect": {
      "file": "src/node_userselect.c",
      "params": [
        {
          "name": "branches",
          "type": "node_list",
          "flags": [],
          "desc": "a set of branches to pick from"
        },
        {
          "name": "branch",
          "type": "i32",
          "default": 0,
          "flags": ["live"],
          "desc": "controls which branch is taken"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        },
        {
          "name": "live_min",
          "type": "i32",
          "default": 0,
          "flags": [],
          "desc": "minimum value allowed during live change (only honored when live_id is set)"
        },
        {
          "name": "live_max",
          "type": "i32",
          "default": 10,
          "flags": [],
          "desc": "maximum value allowed during live change (only_honored when live_id is set)"
        }
      ]
    },
    "UserSwitch": {
      "file": "src/node_userswitch.c",
      "params": [
        {
          "name": "child",
          "type": "node",
          "flags": ["nonull"],
          "desc": "scene to be rendered or not"
        },
        {
          "name": "enabled",
          "type": "bool",
          "default": 1,
          "flags": ["live"],
          "desc": "set if the scene should be rendered"
        },
        {
          "name": "live_id",
          "type": "str",
          "flags": [],
          "desc": "live control identifier"
        }
      ]
    },
    "VelocityFloat": {
      "file": "src/node_velocity.c",
      "params": [
        {
          "name": "animation",
          "type": "node",
          "node_types": ["AnimatedFloat"],
          "flags": ["nonull"],
          "desc": "1D animation to analyze the velocity from"
        }
      ]
    },
    "VelocityVec2": {
      "file": "src/node_velocity.c",
      "params": [
        {
          "name": "animation",
          "type": "node",
          "node_types": ["AnimatedVec2"],
          "flags": ["nonull"],
          "desc": "2D animation to analyze the velocity from"
        }
      ]
    },
    "VelocityVec3": {
      "file": "src/node_velocity.c",
      "params": [
        {
          "name": "animation",
          "type": "node",
          "node_types": ["AnimatedVec3"],
          "flags": ["nonull"],
          "desc": "3D animation to analyze the velocity from"
        }
      ]
    },
    "VelocityVec4": {
      "file": "src/node_velocity.c",
      "params": [
        {
          "name": "animation",
          "type": "node",
          "node_types": ["AnimatedVec4"],
          "flags": ["nonull"],
          "desc": "4D animation to analyze the velocity from"
        }
      ]
    }
  }
}
