name: 'tests Linux'

on:
  push:
    branches:
      - 'master'
  pull_request:

jobs:
  build_libs:

    runs-on: ubuntu-18.04
    container: ubuntu:19.10

    steps:
    - uses: actions/checkout@v1
    - uses: docker://ubuntu:19.10

    - name: Install dependencies
      run: |
        apt -y --force-yes update
        apt -y install build-essential

        #
        # python3-venv is required to prevent the following issue:
        #     The virtual environment was not created successfully because ensurepip is not
        #     available.  On Debian/Ubuntu systems, you need to install the python3-venv
        #     package using the following command.
        #
        #         apt-get install python3-venv
        #
        apt -y install curl pkg-config libsdl2-dev python3-pip python3-dev python3-venv
        apt -y install ffmpeg libavcodec-dev libavutil-dev libavformat-dev libavdevice-dev libavfilter-dev libswscale-dev libswresample-dev libpostproc-dev

    - name: Build
      run: |
        #
        # This -fPIE is a workaround for the following link issue:
        #     relocation R_X86_64_32 against `.rodata.str1.8' can not be used
        #     when making a PIE object; recompile with -fPIE
        #
        # To summarize the issue:
        #
        # - On Python side, `python3-config` is a script generated from a
        #   template using a global CFLAGS. But at the same time, the script
        #   uses LIBS and SYSLIBS to construct the LDFLAGS (and not LDFLAGS for
        #   some moronic reason).
        # - On Debian/Ubuntu side, they decided to have the following injected:
        #   CFLAGS="-specs=/usr/share/dpkg/no-pie-compile.specs"
        #   LDFLAGS="-specs=/usr/share/dpkg/no-pie-link.specs"
        #   And unfortunately, the former can not go without the latter
        #   (otherwise there is a link error).
        #
        # As a result, `python3-config --cflags` will return the `-specs=...`
        # flags, but `python3-config --ldflags` will not return the
        # complementary `-specs=...`.
        #
        export CFLAGS=-fPIE
        make -j$(($(nproc)+1))
    - name: Run tests with GL backend
      run: |
        DISABLE_TESTS_SAMPLES=yes DISABLE_TESTS_STD430=yes BACKEND=gl DEBUG=yes DEBUG_GL=yes make -k -j$(($(nproc)+1)) tests
    - name: Run tests with GLES backend
      run: |
        DISABLE_TESTS_SAMPLES=yes DISABLE_TESTS_STD430=yes BACKEND=gles DEBUG=yes DEBUG_GL=yes make -k -j$(($(nproc)+1)) tests
